<!DOCTYPE html>
<html>
<head>
    <style>

        .grid-container {
            display: grid;
            grid-template-rows: 1fr 1fr;
            grid-template-columns: 1fr 1fr;
            height: 100vh;
        }

        .grid-item {
            padding: 10px;
            border: 2px solid #000;
            overflow: hidden;
        }


        .container {
            display: flex;
            flex-wrap: wrap;
            max-width: 600px;
            margin: 0 auto;
        }

        .box {
            width: 100px;
            height: 100px;
            background-color: #0074d9;
            margin: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .connect-button {
            margin-top: 10px;
        }

        .arrow {
            position: absolute;
            border: 2px solid red; /* Change arrow color to red */
            width: 100%;
        }
    </style>
</head>
<body>
    <input type="checkbox" id="toggleCheckbox">
    <label for="toggleCheckbox">Toggle Code</label>

    <div class="grid-container">
        <div class="grid-item"></div>
        <div class="grid-item" id="codeContainer" style="display: none;">
            <button onclick="createBoxes()">Create Nodes</button>
            <div id="boxContainer" class="container"></div>
            
            <button onclick="connectBoxes()">Create Edges</button>
            <input type="number" id="firstBox" placeholder="First Box">
            <input type number" id="secondBox" placeholder="Second Box">
            
            <button onclick="setValueOnBox()">Add node input</button>
            <input type="number" id="boxNumber" placeholder="Box Number">
            <input type="text" id="boxValue" placeholder="Value">
        </div>
        <div class="grid-item"></div>
    </div>
    
    <script>
        let boxes = [];

        function createBoxes() {
            var numBoxes = parseInt(prompt("Enter the number of boxes:"));

            if (!isNaN(numBoxes)) {
                var boxContainer = document.getElementById("boxContainer");
                boxContainer.innerHTML = ""; // Clear previous boxes

                for (var i = 1; i <= numBoxes; i++) {
                    var box = document.createElement("div");
                    box.className = "box";
                    box.id = i;
                    boxes.push(box);
                    boxContainer.appendChild(box);
                }
            }
        }

        function connectBoxes() {
            var firstBox = document.getElementById("firstBox").value;
            var secondBox = document.getElementById("secondBox").value;

            if (!isNaN(firstBox) && !isNaN(secondBox) && firstBox >= 0 && secondBox >= 0 && firstBox < (boxes.length+1) && secondBox < (boxes.length+1)) {
                var arrow = document.createElement("div");
                arrow.className = "arrow";
                boxes[firstBox].appendChild(arrow);
                boxes[secondBox].appendChild(arrow.cloneNode(true));
            } else {
                alert("Invalid box numbers. Please enter valid box numbers.");
            }
        }

        function setValueOnBox() {
            var boxNumber = document.getElementById("boxNumber").value;
            var boxValue = document.getElementById("boxValue").value;

            if (!isNaN(boxNumber) && boxNumber >= 0 && boxNumber < (boxes.length + 1)) {
                boxes[boxNumber].textContent = boxValue;
            } else {
                alert("Invalid box number. Please enter a valid box number.");
            }
        }

        // Toggle code container visibility
        const toggleCheckbox = document.getElementById("toggleCheckbox");
        const codeContainer = document.getElementById("codeContainer");

        toggleCheckbox.addEventListener("change", function () {
            codeContainer.style.display = this.checked ? "block" : "none";
        });
    </script>
</body>
</html>
